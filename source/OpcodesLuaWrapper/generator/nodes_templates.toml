file = """
local LDNodeEditorContext = require("ld.context")
local LDNodeEditor = require("ld.node_editor")
local nodesColors = require("ld.node_colors")
local nodesIcons = require("ld.node_icons")
local fa = require("libs.fa")
local enums = require("libs.enums")

---@class LDNodeEditor{node_name}Node : LDNodeEditorNode
{fields}

local {node_name_u}_NODE_TYPE = "core.{node_name_l}"

---@type LDNodeEditorNodeType
local {node_name_var}Node = {{
    typeName = {node_name_u}_NODE_TYPE,
    category = "{category}",
    icon = nodesIcons["function"],
    color = nodesColors["function"],{short_desc}
    isCallable = {is_callable},
    ---@param ctx LDNodeEditorContext
    ---@param newNodeId integer
    ---@param getPinId fun():integer
    new = function(ctx, newNodeId, getPinId)
        ---@type LDNodeEditor{node_name}Node
        local newNode = {{
            id = newNodeId,
            nodeType = {node_name_u}_NODE_TYPE,
            inputs = {{
                {inputs}
            }},
            outputs = {{
                {outputs}
            }}{fieldsInit}
        }}
        return newNode
    end,
    ---@param editor LDNodeEditor
    ---@param ctx LDNodeEditorContext
    ---@param node LDNodeEditor{node_name}Node
    ---@param builder BlueprintNodeBuilder
    draw = function(editor, ctx, node, builder)
        local fontScale = ImGui.GetFontSize() / 16;

        builder:Begin(NodeEditor.NodeId(node.id));
        LDNodeEditor.defaultHeader(editor, builder, node);

        {draw}

        builder:End();
    end,
    ---@param editor LDNodeEditor
    ---@param context LDNodeEditorContext
    ---@param node LDNodeEditor{node_name}Node
    ---@param inputValues any[]
    run = function(editor, context, node, inputValues)
        {run}
        return {{{run_ret}}}
    end
}}

return {node_name_var}Node
"""
input = """{{
                    id = getPinId(),
                    node = newNodeId,
                    kind = NodeEditorPinKind.Input,
                    type = "{type}",
                }}
"""
output = """{{
                    id = getPinId(),
                    node = newNodeId,
                    kind = NodeEditorPinKind.Output,
                    type = "{type}",
                }}
"""
input_draw="""
LDNodeEditor.defaultInput(editor, ctx, builder, node.inputs[{index}], "{name}", function ()
            node.{field} = editor.dataTypes[node.inputs[{index}].type].drawEditValue(node.{field}, "##{field}Edit", fontScale * 100)
        end);
"""
input_enum_draw="""
LDNodeEditor.defaultInput(editor, ctx, builder, node.inputs[{index}], "{name}", function ()
            local name = "<Not set>";
            for key, value in pairs(enums.{enum}) do
                if value == node.{field} then
                    name = key;
                    break;
                end
            end
            if ImGui.Button(name, ImVec2.new()) then
                NodeEditor.Suspend();
                ImGui.OpenPopup("##{field}Select", 0);
                NodeEditor.Resume();
            end

            if ImGui.IsPopupOpen("##{field}Select", 0) then
                NodeEditor.Suspend();
                if ImGui.BeginPopup("##{field}Select", 0) then
                    if ImGui.BeginListBox("##{field}SelectChild", ImVec2.new(200 * fontScale, 100 * fontScale)) then
                        for key, value in pairs(enums.{enum}) do
                            if ImGui.Selectable(key, value == node.{field}, 0, ImVec2.new()) then
                                node.{field} = value;
                                ImGui.CloseCurrentPopup();
                            end
                        end
                        ImGui.EndListBox();
                    end
                    ImGui.EndPopup();
                end
                NodeEditor.Resume();
            end
        end);
"""
output_draw="""
LDNodeEditor.defaultOutput(editor, ctx, builder, node.outputs[{index}], "{name}");
"""
input_run="local {field} = inputValues[{index}] or node.{field}"
input_run_check="""if {field} == nil or {field} == 0 then
            error("Input {name} is not set")
        end"""
run_call="{clazz}Op.{method}({inps})"
run_call_ret="local {outs} = {clazz}Op.{method}({inps})"
