[cpp]
field_declaration = "class{struct_name}[\"{field_name}\"] = &{struct_name}::{field_name};"
field_declarations_array = """
class{struct_name}["{field_name}"] = sol::property(
            []({struct_name} &struct_, int index) -> {type} {{ return struct_.{field_name}[index]; }},
            []({struct_name} &struct_, int index, {type} value) {{ struct_.{field_name}[index] = value; }}
        );"""
field_declarations_bitfield = """
class{struct_name}["{field_name}"] = sol::property(
            []({struct_name} &struct_) -> {type} {{ return struct_.{field_name}; }},
            []({struct_name} &struct_, {type} value) {{ struct_.{field_name} = value; }}
        );"""
function_set = "class{struct_name}[\"{function_name}\"] = {function};"
function_declaration = "&{full_function_name}"
function_declaration_return_ppointer = """[]{input_args} {{
            auto result = {full_function_name}{call_args};
            return *result;
        }}"""
function_declaration_overloading = """sol::overload(
        {overloading_functions}
    )"""
function_declaration_with_pointers = """[]({input_args}) {{
            {pointers_declaration}
            {call_function}
            return std::make_tuple({output_vars});
        }}"""
call_function_result = "auto result = {full_function_name}({input_args_with_pointers});"
call_function = "{full_function_name}({input_args_with_pointers});"
function_input_arg = "{type} {input_name}"
function_pointers_pointer_declaration = "auto {pointer_name} = std::make_unique<{type}>({input_value});"
function_pointers_declaration = "auto {pointer_name} = {var_name}.is<{type}>() ? std::make_unique<{type}>() : std::make_unique<{type}>({var_name}.as<{type}>());"
constructor_declaration = """[]{input_args} {{
            auto result = {full_function_name}{call_args};
            return std::shared_ptr<{struct_name}>(result, {deleter});
        }}"""
struct_file = """
#include <cimgui.h>
#include <sol.hpp>
void bind{struct_name}(sol::state &state) {{
    auto class{struct_name} = state.new_usertype<{struct_name}>("{struct_name}", {constructor});
    {field_declarations}
    {function_declarations}
}}
"""
imgui_file_declaration = """
#include <cimgui.h>
#include <sol.hpp>
void bindImGui(sol::state &state) {{
    auto classImGui = state["ImGui"].get_or_create<sol::table>();
    {function_declarations}
}}
"""
im_vector_declaration = """
state.new_usertype<{im_vector}>("{im_vector}", sol::no_constructor,
                                            "Size", &{im_vector}::Size,
                                            "Capacity", &{im_vector}::Capacity,
                                            "Data", sol::property([]({im_vector} &self, int index) {{
                                                return self.Data[index];
                                            }}, []({im_vector} &self, int index, {type} value) {{
                                                self.Data[index] = value;
                                            }})
    );
"""
im_vectors_file = """
#include <cimgui.h>
#include <sol.hpp>
void bindImVectors(sol::state &state) {{
    {}
}}
"""
structs_file_binds = """
#include <sol.hpp>
extern void bindImVectors(sol::state &state);
extern void bindImGui(sol::state &state);
{}

void bindStructs(sol::state &state) {{
    bindImVectors(state);
    bindImGui(state);
    {}
}}
"""
extern_bind = "extern void bind{struct_name}(sol::state &state);"
struct_bind = "bind{struct_name}(state);"

[lua]
struct_record = """
---@class {struct_name}
{fields}
{struct_name} = {{
    {functions}
}}
"""
struct_field_item = "---@field {name} {type}"
function_declaration_void = """
---{info}{params}
    {name} = function ({inputs}) end"""
function_parameter = "---@param {name} {type}"
function_declaration_return = """
---{info}{params}
    ---@return {returns}
    {name} = function ({inputs}) end"""
im_vector_record = """
---@class {name}
{name} = {{
    ---@type integer
    Size = nil,
    ---@type integer
    Capacity = nil,
    ---@type {type}[]
    Data = nil
}}
"""
imgui_record = """
ImGui = {{
    {functions}
}}
"""
custom_declaration = """
---@param text string
---@param endText userdata | nil
ImGui.TextUnformatted = function(text, endText) end

---@param label string
---@param str string
---@param flags integer
---@param callback function
---@param userData userdata
---@return boolean, string
ImGui.InputText = function(label, str, flags, callback, userData) end

---CalcTextSize(ImVec2 *pOut, const char* text,const char* text_end=((void*)0),bool hide_text_after_double_hash=false,float wrap_width=-1.0f)
---@param pOut ImVec2
---@param text string
---@param endText string | nil
---@param hideTextAfterDoubleHash boolean
---@param wrapWidth number
ImGui.CalcTextSize = function(pOut, text, endText, hideTextAfterDoubleHash, wrapWidth) end
"""

[teal]
struct_record = """
global record {}
    userdata
    {}
    {}
end
"""
struct_record_item = "{}: {}"
function_declaration_void = "{name}: function({input_args})"
function_declaration_return = "{name}: function({input_args}): {returns}"
im_vector_record = """
global record {}
    userdata
    Size: integer
    Capacity: integer
    Data: {{{}}}
end
"""